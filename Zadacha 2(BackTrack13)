//Задача вывода путника из лабиринта. Дан лабиринт размером NхN (N<=15). Форма лабиринта записана в текстовом файле, cтена обозначается символом М, 
//отсутствие стены - символом пробела. Даны координаты мышки в лабиринте (номер строки (X) и номер столбца (Y)) и координаты сыра (номер строки (XС) и 
//номер столбца (YС)). Нужно вывести самый длинный путь мышки к сыру. Для этого распечатать сам лабиринт и обозначить путь символами +. 
//Гарантируется, что такой путь только один. Длина пути определяется числом клеток на которые должна ступить нога мышки.
#include <windows.h>
#include <fstream>
#include <string>
#include "pt4.h"
using namespace std;

int n, kmax = 0, k = 0;
char lab[50][50], rez[50][50];

void go(int x1, int y1, int xc, int yc)
{
	if (lab[x1][y1] == ' ')
	{
		k++;
		lab[x1][y1] = '+';
		if ((x1 == xc) && (y1 == yc) && (k > kmax))
		{
			kmax = k;
			for (int i = 1; i <= n; i++)
				for (int j = 1; j <= n; j++)
					rez[i][j] = lab[i][j];
		}
		else
		{
			go(x1 + 1, y1, xc, yc);
			go(x1 - 1, y1, xc, yc);
			go(x1, y1 + 1, xc, yc);
			go(x1, y1 - 1, xc, yc);
		}
		lab[x1][y1] = ' ';
		k--;
	}
}

void Solve()
{
	Task("BackTrack13");
	string s1, s2;
	int x, y, xc, yc;
	pt >> s1;
	pt >> n >> x >> y >> xc >> yc;

	ifstream f1(s1);
	for (int i = 1; i <= n; i++)
	{
		getline(f1, s1);
		for (int j = 1; j <= n; j++)
			lab[i][j] = s1[j - 1];
	}
	f1.close();

	go(x, y, xc, yc);

	pt >> s2;
	ofstream f2(s2);
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
			f2 << rez[i][j];
		f2 << endl;
	}
	f2.close();
}
